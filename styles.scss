* {
  box-sizing: border-box;
}

:root {
  --zenika-red: rgb(178, 30, 62);
}

html, body {
  margin: 0;
  background-color: #eee;
}


body {
  font-family: "Helvetica Neue", sans-serif;
  font-size: 1rem;
}

.container {
  margin: 1rem auto;
  width: 50vw;
}

.switch {
  font-size: 0.8rem;
}
// Swiych button
button[role="switch"] {
  background-color: var(--zenika-red);
  border-radius: 1.375rem !important;
  box-sizing: content-box;
  color: white;
  font-weight: bold;
  font-size: 0.8rem;
  height: 1.75rem;
  line-height: 1.75rem;
  padding: 0;
  transition: all 0.3s cubic-bezier(0, 0.5, 0.5, 1);
  width: 6.75rem;
  will-change: background-color;
  border: 0;
  position: relative;
}
button[role="switch"]::before {
  background: darkgrey;
  border-radius: 1.375rem;
  content: "";
  position: absolute;
  height: 1.375rem;
  left: .25rem;
  top: .25rem;
  transform: none;
  transition: transform 0.3s cubic-bezier(0, 0.5, 0.5, 1) 0s;
  width: 1.375rem;
  will-change: transform;
}
button[role="switch"][aria-checked="true"]::before {
  background: white;
  transform: translateX(4.875rem);
}
button[role="switch"][aria-checked="true"] > :first-child {
  display: block;
}
button[role="switch"] > :first-child, button[role="switch"][aria-checked="true"] > :last-child {
  display: none;
}




table {
  border-spacing: 0;
  border-collapse: separate;

  caption {
    font-size: .9rem;
    font-style: italic;
    padding: 5px;
  }
}

td, th {
  border-bottom: var(--zenika-red) 1px solid;
}

th {
  font-size: 1rem;
  font-weight: bold;
}

/// Mixin to prefix a property
/// @author Hugo Giraudel
/// @param {String} $property - Property name
/// @param {*} $value - Property value
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }
  // Output standard non-prefixed declaration
  #{$property}: $value;
}


@media screen and (min-width: 50em) {


  table {
    border-collapse: collapse;
    border-spacing: 0;
    caption-side: top;
    empty-cells: hide;
    font-feature-settings: "tnum";
  }

  .chart {
    //--height: 280px;
    // TODO : responsive
    --height: 60vh;
    height: var(--height);
    width: 40vw;
    display: grid;
    grid-template-areas: "content" "xAxis" "title";
    position: relative;
  }


  table.chart {
    caption {
      grid-area: title;
    }

    th[scope=row] {
      display: none;
    }

    tbody {
      height: inherit;
    }

    tbody tr.effectif {
      grid-area: content;
      display: grid;
      grid-auto-columns: 1fr;
      grid-template-rows: repeat(var(--yEffectif), 1fr);
      grid-column-gap: 5px;

      position: absolute;
      width: 100%;
      height: 100%;
      z-index: 2;

      --line-every: 50;
      background-image: linear-gradient(to bottom, #ccc 1px, transparent 1px);
      background-size: 100% calc(100% / var(--yEffectif) * var(--line-every));

      td {
        --start: calc(var(--yEffectif) + 1 - var(--value));
        grid-row-start: var(--start);
        grid-row-end: -1;
        background-color: var(--zenika-red);
        border-radius: 5px 5px 0 0;
        text-align: center;
        padding-top: .5rem;
        transition: all .2s ease-in-out;

        &:hover {
          transform: scale(1.05);
          filter: invert(100%);
          cursor: pointer;
        }

        span {
          font-weight: bolder;
          color: #eeeeee;
          font-size: .9rem;
        }
      }


    }

    thead {
      grid-area: xAxis;

      tr {
        display: grid;

        th {
          display: flex;
          grid-row: -2 / span 1;
          justify-content: center;
          border-bottom: none;
          padding: 5px;
        }
      }
    }


    tr.ca {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      font-size: 0.9rem;
      --offset-bottom: 0px;
      --bottom: calc(100% - var(--height));
      --ca-height: var(--height);


      &::before {
        grid-area: content;
        content: "";
        --line-width: 4px;

        --offset: calc((100% / var(--x)) / 2);
        background-color: var(--color);
        @include prefix(clip-path,
                polygon(
                  // go
                                var(--offset) calc(100% - (var(--1) / var(--yCa) * 100%)),
                                calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--2) / var(--yCa) * 100%)),
                                calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--3) / var(--yCa) * 100%)),
                                calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--4) / var(--yCa) * 100%)),
                                calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--5) / var(--yCa) * 100%)),
                                calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--6) / var(--yCa) * 100%)),
                                calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--7) / var(--yCa) * 100%)),
                          // and back
                                calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--7) / var(--yCa) * 100%) + var(--line-width)),
                                calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--6) / var(--yCa) * 100%) + var(--line-width)),
                                calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--5) / var(--yCa) * 100%) + var(--line-width)),
                                calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--4) / var(--yCa) * 100%) + var(--line-width)),
                                calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--3) / var(--yCa) * 100%) + var(--line-width)),
                                calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--2) / var(--yCa) * 100%) + var(--line-width)),
                                var(--offset) calc(100% - (var(--1) / var(--yCa) * 100%) + var(--line-width))
                ), webkit);
        position: absolute;
        top: 0;
        bottom: var(--bottom);
        width: 100%;
        z-index: 3;
      }

      td {
        display: flex;
        justify-content: center;
        border-bottom: none;
        padding: 5px;
        position: relative;
        --top: calc(var(--ca-height) - (var(--value) / var(--yCa) * var(--ca-height)));

        &::before {

          --size: 0.6rem;
          background-color: #cccccc;
          border: 2px solid var(--color);
          border-radius: 50%;
          box-shadow: 0 0 0 rgba(0, 0, 0, .5);
          content: "";
          height: var(--size);
          position: absolute;
          top: var(--top);
          transform: translate3d(0, calc(var(--size) / -2), 0);
          width: var(--size);
          z-index: 4;
        }

        & span {
          position: absolute;
          top: calc(var(--top) - 2rem);
          z-index: 5;
        }
      }

    }
  }


}





